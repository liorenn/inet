generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Camera {
  type       String
  model      String
  megapixel  Int
  device     Device     @relation(fields: [model], references: [model], onDelete: Cascade)
  cameraType CameraType @relation(fields: [type], references: [name])

  @@id([model, type])
}

model Color {
  name    String        @id @unique
  hex     String
  devices DeviceColor[]
}

model User {
  id         String       @id
  email      String       @unique
  username   String       @unique
  name       String
  password   String
  phone      String
  accessKey  Int          @default(1)
  comments   Comment[]
  deviceList DeviceUser[]
  sessions   Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  model     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  username  String
  rating    Int
  device    Device   @relation(fields: [model], references: [model], onDelete: Cascade)
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade)
}

model DeviceUser {
  deviceModel String
  userEmail   String
  device      Device @relation(fields: [deviceModel], references: [model], onDelete: Cascade)
  user        User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([deviceModel, userEmail])
}

model DeviceColor {
  colorName   String
  deviceModel String
  color       Color  @relation(fields: [colorName], references: [name], onDelete: Cascade)
  device      Device @relation(fields: [deviceModel], references: [model], onDelete: Cascade)

  @@id([deviceModel, colorName])
}

model Device {
  model            String           @id
  name             String
  type             String
  releaseDate      DateTime
  releaseOS        String?
  releasePrice     Float
  connector        String
  biometrics       String
  batterySize      Int?
  chipset          String
  weight           Float
  imageAmount      Int
  height           Float
  width            Float
  depth            Float
  storage          Int?
  cpu              Int?
  gpu              Int?
  memory           Int?
  magsafe          Boolean?
  screenSize       Float?
  screenType       String?
  resistanceRating String?
  price            Float            @default(0)
  cameras          Camera[]
  comments         Comment[]
  biometricFeature BiometricFeature @relation(fields: [biometrics], references: [name])
  deviceConnector  DeviceConnector  @relation(fields: [connector], references: [name])
  deviceType       DeviceType       @relation(fields: [type], references: [name])
  colors           DeviceColor[]
  users            DeviceUser[]
}

model DeviceConnector {
  name    String   @id @unique
  devices Device[]
}

model BiometricFeature {
  name    String   @id @unique
  devices Device[]
}

model DeviceType {
  name    String   @id @unique
  devices Device[]
}

model CameraType {
  name    String   @id @unique
  cameras Camera[]
}
