generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camera {
  id         Int        @id @unique @default(autoincrement())
  deviceType DeviceType
  megapixel  Int        @db.SmallInt
  model      String
  cameraType CameraType
  device     Device     @relation(fields: [model], references: [model], onDelete: Cascade)
}

model Color {
  name    String        @id @unique
  hex     String        @db.VarChar
  devices DeviceColor[]
}

model User {
  id         String       @id @unique @db.VarChar
  username   String       @unique @db.VarChar
  name       String       @db.VarChar
  password   String       @db.VarChar
  email      String       @unique @db.VarChar
  phone      String       @unique @db.VarChar
  accessKey  Int          @default(1)
  comments   Comment[]
  deviceList DeviceUser[]
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  model     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  likes     Int
  username  String   @db.VarChar
  Rating    Int
  device    Device   @relation(fields: [model], references: [model], onDelete: Cascade)
  user      User     @relation(fields: [username], references: [username])
}

model DeviceUser {
  deviceModel String @db.VarChar
  userId      String @db.VarChar
  device      Device @relation(fields: [deviceModel], references: [model])
  user        User   @relation(fields: [userId], references: [id])

  @@id([deviceModel, userId])
}

model DeviceColor {
  colorName String
  model     String
  Color     Color  @relation(fields: [colorName], references: [name])
  device    Device @relation(fields: [model], references: [model])

  @@id([colorName, model])
}

model Device {
  model            String            @id
  deviceType       DeviceType
  name             String            @db.VarChar
  releaseDate      DateTime          @db.Date
  batterySize      Int
  chipset          String            @db.VarChar
  operatingSystem  Float             @db.Real
  weight           Float             @db.Real
  description      String
  imageAmount      Int               @db.SmallInt
  resistanceRating String            @db.VarChar
  releasePrice     Int               @db.SmallInt
  height           Int               @db.SmallInt
  width            Int               @db.SmallInt
  depth            Int               @db.SmallInt
  storage          Int?              @db.SmallInt
  cpu              Int?              @db.SmallInt
  gpu              Int?              @db.SmallInt
  unifiedMemory    Int?              @db.SmallInt
  wiredCharging    Float?            @db.Real
  wirelessCharging Float?            @db.Real
  memory           Int?              @db.SmallInt
  screenSize       Float?            @db.Real
  screenType       String?           @db.VarChar
  biometrics       BiometricFeature
  connectors       DeviceConnector[]
  cameras          Camera[]
  comments         Comment[]
  colors           DeviceColor[]
  usersList        DeviceUser[]
}

model DeviceConnector {
  model         String  @id
  lightning     Boolean
  usb_c         Boolean
  thunderbolt_3 Boolean
  magsafe       Boolean
  device        Device  @relation(fields: [model], references: [model], onDelete: Cascade)
}

enum BiometricFeature {
  face_id
  touch_id
  passcode
  device_connection
}

enum CameraType {
  ultrawide
  wide
  telephoto
  front
}

enum DeviceType {
  airpods
  ipad
  iphone
  mac
  imac
  macbook
}
