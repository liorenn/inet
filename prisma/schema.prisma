generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camera {
  type       String
  model      String
  megapixel  Int        @db.SmallInt
  device     Device     @relation(fields: [model], references: [model], onDelete: Cascade)
  cameraType CameraType @relation(fields: [type], references: [name])

  @@id([model, type])
}

model Color {
  name    String        @id @unique
  hex     String        @db.VarChar
  devices DeviceColor[]
}

model User {
  email      String       @id @unique @db.VarChar
  username   String       @unique @db.VarChar
  name       String       @db.VarChar
  password   String       @db.VarChar
  phone      String       @db.VarChar
  accessKey  Int          @default(1)
  comments   Comment[]
  deviceList DeviceUser[]
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  model     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  likes     Int
  username  String   @db.VarChar
  rating    Int
  device    Device   @relation(fields: [model], references: [model], onDelete: Cascade)
  user      User     @relation(fields: [username], references: [username])
}

model DeviceUser {
  deviceModel String @db.VarChar
  userEmail   String @db.VarChar
  device      Device @relation(fields: [deviceModel], references: [model], onDelete: Cascade)
  user        User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@id([deviceModel, userEmail])
}

model DeviceColor {
  colorName   String
  deviceModel String
  color       Color  @relation(fields: [colorName], references: [name], onDelete: Cascade)
  device      Device @relation(fields: [deviceModel], references: [model], onDelete: Cascade)

  @@id([deviceModel, colorName])
}

model Device {
  model            String           @id
  name             String           @db.VarChar
  type             String           @db.VarChar
  releaseDate      DateTime         @db.Date
  releaseOS        String?          @db.VarChar
  releasePrice     Float            @db.Real
  connector        String           @db.VarChar
  biometrics       String           @db.VarChar
  batterySize      Int?             @db.SmallInt
  chipset          String           @db.VarChar
  weight           Float            @db.Real
  imageAmount      Int              @db.SmallInt
  height           Float            @db.Real
  width            Float            @db.Real
  depth            Float            @db.Real
  storage          Int?             @db.SmallInt
  cpu              Int?             @db.SmallInt
  gpu              Int?             @db.SmallInt
  memory           Int?             @db.SmallInt
  magsafe          Boolean?
  screenSize       Float?           @db.Real
  screenType       String?          @db.VarChar
  resistanceRating String?          @db.VarChar
  price            Float            @default(0) @db.Real
  cameras          Camera[]
  comments         Comment[]
  biometricFeature BiometricFeature @relation(fields: [biometrics], references: [name])
  deviceConnector  DeviceConnector  @relation(fields: [connector], references: [name])
  deviceType       DeviceType       @relation(fields: [type], references: [name])
  colors           DeviceColor[]
  users            DeviceUser[]
}

model DeviceConnector {
  name    String   @id @unique
  devices Device[]
}

model BiometricFeature {
  name    String   @id @unique
  devices Device[]
}

model DeviceType {
  name    String   @id @unique
  devices Device[]
}

model CameraType {
  name    String   @id @unique
  cameras Camera[]
}
